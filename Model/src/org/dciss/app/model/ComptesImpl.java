package org.dciss.app.model;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 13 16:17:56 CEST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComptesImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Code,
        Datecreation,
        Solde,
        Nationality;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CODE = AttributesEnum.Code.index();
    public static final int DATECREATION = AttributesEnum.Datecreation.index();
    public static final int SOLDE = AttributesEnum.Solde.index();
    public static final int NATIONALITY = AttributesEnum.Nationality.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ComptesImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("org.dciss.app.model.Comptes");
    }


    /**
     * Gets the attribute value for Code, using the alias name Code.
     * @return the value of Code
     */
    public BigDecimal getCode() {
        return (BigDecimal) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Code.
     * @param value value to set the Code
     */
    public void setCode(BigDecimal value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for Datecreation, using the alias name Datecreation.
     * @return the value of Datecreation
     */
    public Timestamp getDatecreation() {
        return (Timestamp) getAttributeInternal(DATECREATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Datecreation.
     * @param value value to set the Datecreation
     */
    public void setDatecreation(Timestamp value) {
        setAttributeInternal(DATECREATION, value);
    }

    /**
     * Gets the attribute value for Solde, using the alias name Solde.
     * @return the value of Solde
     */
    public BigDecimal getSolde() {
        return (BigDecimal) getAttributeInternal(SOLDE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Solde.
     * @param value value to set the Solde
     */
    public void setSolde(BigDecimal value) {
        setAttributeInternal(SOLDE, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getNationality() {
        return (RowIterator) getAttributeInternal(NATIONALITY);
    }


    /**
     * @param code key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal code) {
        return new Key(new Object[] { code });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

